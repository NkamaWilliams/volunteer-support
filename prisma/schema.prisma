// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String        @db.VarChar(100)
    email         String        @unique
    role          Role
    signups       Signup[]
    createdAt     DateTime      @default(now())
    accounts      Account[]
    sessions      Session[]
    opportunities Opportunity[]

    @@index([email])
}

model Opportunity {
    id               String            @id @default(cuid())
    userId           String
    user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    title            String            @db.VarChar(100)
    description      String?           @db.VarChar(255)
    location         String?           @db.VarChar(100)
    date             DateTime
    max_participants Int
    status           OpportunityStatus
    signups          Signup[]
    createdAt        DateTime          @default(now())

    @@index([userId])
}

model Signup {
    id            String      @id @default(cuid())
    opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
    opportunityId String
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    status        Status
    createdAt     DateTime    @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    ADMIN
    VOLUNTEER
}

enum Status {
    PENDING
    CONFIRMED
    REJECTED
}

enum OpportunityStatus {
    OPEN
    CLOSED
}
